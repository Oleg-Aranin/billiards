{"version":3,"sources":["monster-marbles-sprite-sheets.jpg","logic/Physics.js","logic/Sprite.js","components/Marble.js","components/MarbleList.js","App.js","index.js"],"names":["module","exports","Physics","MarbleR","width","height","marbles","timer","this","initialPositions","simulationStep","forEach","marble","i","x","y","vx","vy","id","_vx","_vy","candidate","quadtree","extent","d","addAll","filter","m","find","normx","normy","c","moveMarble","center","range","map","r","left","right","reduce","acc","pos","concat","decorate","observable","computed","startGameLoop","action","shoot","MarbleDefinitions","dino","redHeart","sun","yellowHeart","mouse","pumpkin","frog","moon","bear","Sprite","sprite","callback","Image","src","MarbleSprite","onload","Object","keys","loadSprite","marbleTypes","Marble","observer","props","useState","state","setState","circle","useRef","type","draggable","physics","radius","fillPatternImage","fillPatternOffset","fillPatternScale","shadowColor","shadowBlur","shadowOpacity","onDragStart","origX","origY","startTime","Date","onDragEnd","current","attrs","delta_t","dist","v","Math","sqrt","onDragMove","ref","MarbleList","length","key","useEffect","className","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.cf97bd43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monster-marbles-sprite-sheets.edcc46e8.jpg\";","import {observable, computed, action, decorate} from 'mobx';\r\nimport {range} from 'd3-array';\r\nimport {timer} from 'd3-timer';\r\nimport {quadtree} from 'd3-quadtree';\r\n\r\nclass Physics {\r\n    MarbleR = 25;\r\n    width = 800;\r\n    height = 600;\r\n    marbles = [];\r\n    timer = null;\r\n\r\n    get initialPositions() {\r\n        const {width, height, MarbleR} = this,\r\n            center = width / 2;\r\n\r\n        const lines = 4,\r\n            maxY = 200;\r\n\r\n        let marbles = range(lines, 0, -1).map(y => {\r\n            if (y === lines) return [{\r\n                x: center, y: maxY,\r\n                vx: 0, vy: 0, r: this.MarbleR\r\n            }];\r\n\r\n            const left = center - y * (MarbleR + 5),\r\n                right = center + y * (MarbleR + 5);\r\n\r\n            return range(left, right, MarbleR * 2 + 5).map(x => ({\r\n                x: x,\r\n                y: maxY - y * (MarbleR * 2 + 5),\r\n                vx: 0,\r\n                vy: 0,\r\n                r: this.MarbleR\r\n            }));\r\n        }).reduce((acc, pos) => acc.concat(pos), []);\r\n\r\n        marbles = [].concat(marbles, {\r\n            x: width / 2,\r\n            y: height - 150,\r\n            vx: 0,\r\n            vy: 0,\r\n            r: this.MarbleR\r\n        });\r\n\r\n        marbles.forEach((m, i) => marbles[i].id = i);\r\n\r\n        return marbles;\r\n    }\r\n\r\n    startGameLoop() {\r\n        this.marbles = this.initialPositions;\r\n\r\n        this.timer = timer(() => this.simulationStep());\r\n    }\r\n\r\n    simulationStep() {\r\n        const {width, height, MarbleR} = this;\r\n\r\n        const moveMarble = ({x, y, vx, vy, id}) => {\r\n            let _vx = ((x + vx < MarbleR) ? -vx : (x + vx > width - MarbleR) ? -vx : vx) * .99,\r\n                _vy = ((y + vy < MarbleR) ? -vy : (y + vy > height - MarbleR) ? -vy : vy) * .99;\r\n\r\n            const subdividedSpace = quadtree().extent([[-1, -1],\r\n                    [this.width + 1, this.height + 1]])\r\n                    .x(d => d.x)\r\n                    .y(d => d.y)\r\n                    .addAll(this.marbles\r\n                        .filter(m => id !== m.id)),\r\n                candidate = subdividedSpace.find(x, y, MarbleR * 2);\r\n\r\n            if (candidate) {\r\n\r\n                const cx = candidate.x,\r\n                    cy = candidate.y,\r\n                    normx = cx - x,\r\n                    normy = cy - y,\r\n                    dist = (normx ** 2 + normy ** 2),\r\n                    c = (_vx * normx + _vy * normy) / dist * 2.3;\r\n\r\n                _vx = (_vx - c * normx) / 2.3;\r\n                _vy = (_vy - c * normy) / 2.3;\r\n\r\n                candidate.vx += -_vx;\r\n                candidate.vy += -_vy;\r\n                candidate.x += -_vx;\r\n                candidate.y += -_vy;\r\n            }\r\n\r\n            return {\r\n                x: x + _vx,\r\n                y: y + _vy,\r\n                vx: _vx,\r\n                vy: _vy\r\n            }\r\n        };\r\n\r\n        this.marbles.forEach((marble, i) => {\r\n            const {x, y, vx, vy} = moveMarble(marble);\r\n\r\n            this.marbles[i].x = x;\r\n            this.marbles[i].y = y;\r\n            this.marbles[i].vx = vx;\r\n            this.marbles[i].vy = vy;\r\n        });\r\n    }\r\n\r\n    shoot({x, y, vx, vy}, i) {\r\n        const maxSpeed = 20;\r\n\r\n        this.marbles[i].x = x;\r\n        this.marbles[i].y = y;\r\n        this.marbles[i].vx = vx < maxSpeed ? vx : maxSpeed;\r\n        this.marbles[i].vy = vy < maxSpeed ? vy : maxSpeed;\r\n    }\r\n}\r\n\r\ndecorate(Physics, {\r\n    MarbleR: observable,\r\n    width: observable,\r\n    height: observable,\r\n    marbles: observable,\r\n    initialPositions: computed,\r\n    startGameLoop: action,\r\n    simulationStep: action,\r\n    shoot: action\r\n})\r\n\r\nexport default new Physics();\r\n","import {observable, action, computed, decorate} from 'mobx'\r\nimport MarbleSprite from '../monster-marbles-sprite-sheets.jpg'\r\n\r\n\r\nconst MarbleDefinitions = {\r\n    dino: {x: -222, y: -177, c: '#8664d5'},\r\n    redHeart: {x: -222, y: -299, c: '#e47178'},\r\n    sun: {x: -222, y: -420, c: '#5c96ac'},\r\n\r\n    yellowHeart: {x: -400, y: -177, c: '#c8b405'},\r\n    mouse: {x: -400, y: -299, c: '#7d7e82'},\r\n    pumpkin: {x: -400, y: -420, c: '#fa9801'},\r\n\r\n    frog: {x: -576, y: -177, c: '#98b42b'},\r\n    moon: {x: -575, y: -299, c: '#b20717'},\r\n    bear: {x: -576, y: -421, c: '#a88534'}\r\n};\r\n\r\nexport {MarbleDefinitions};\r\n\r\nclass Sprite {\r\n    sprite = null\r\n\r\n    loadSprite(callback = () => null) {\r\n        const sprite = new Image()\r\n        sprite.src = MarbleSprite\r\n\r\n        sprite.onload = () => {\r\n            this.sprite = sprite\r\n            callback()\r\n        }\r\n    }\r\n\r\n    get marbleTypes() {\r\n        return Object.keys(MarbleDefinitions)\r\n    }\r\n\r\n    get MarbleDefinitions() {\r\n        return MarbleDefinitions\r\n    }\r\n}\r\n\r\ndecorate(Sprite, {\r\n    sprite: observable,\r\n    loadSprite: action,\r\n    marbleTypes: computed,\r\n    MarbleDefinitions: computed\r\n})\r\n\r\nexport default new Sprite()\r\n","import React, {useState, useRef} from 'react'\r\nimport {observer} from \"mobx-react\";\r\nimport {Circle} from \"react-konva\";\r\n\r\nconst Marble = observer((props) => {\r\n    const [state, setState] = useState(null)\r\n    const circle = useRef(null)\r\n\r\n    const onDragStart = () => {\r\n        const {physics, id} = props\r\n\r\n        setState({\r\n            origX: physics.marbles[id].x,\r\n            origY: physics.marbles[id].y,\r\n            startTime: new Date()\r\n        })\r\n    }\r\n\r\n    const onDragMove = () => {\r\n        const {physics, id} = props\r\n        const {x, y} = circle.current.attrs\r\n\r\n        physics.marbles[id].x = x\r\n        physics.marbles[id].y = y\r\n    }\r\n\r\n    const onDragEnd = () => {\r\n        const {physics} = props,\r\n            {origX, origY} = state,\r\n            {x, y} = circle.current.attrs\r\n\r\n        const delta_t = new Date() - state.startTime,\r\n            dist = (x - origX) ** 2 + (y - origY) ** 2,\r\n            v = Math.sqrt(dist) / (delta_t / 16)\r\n\r\n        physics.shoot({\r\n            x,\r\n            y,\r\n            vx: (x - origX) / (v / 3),\r\n            vy: (y - origY) / (v / 3)\r\n        }, props.id)\r\n    }\r\n\r\n    const {sprite, type, draggable, id, physics} = props\r\n    const MarbleDefinitions = sprite.MarbleDefinitions\r\n    const {x, y, r} = physics.marbles[id];\r\n\r\n    return (\r\n        <Circle\r\n            x={x} y={y} radius={r}\r\n            fillPatternImage={sprite.sprite}\r\n            fillPatternOffset={MarbleDefinitions[type]}\r\n            fillPatternScale={{x: r * 2 / 111, y: r * 2 / 111}}\r\n            shadowColor={MarbleDefinitions[type].c}\r\n            shadowBlur={15}\r\n            shadowOpacity={1}\r\n            draggable\r\n            onDragStart={onDragStart}\r\n            onDragEnd={onDragEnd}\r\n            onDragMove={onDragMove}\r\n            ref={circle}\r\n        />\r\n    )\r\n})\r\n\r\nexport default Marble\r\n","import React from 'react'\r\nimport {observer} from \"mobx-react\";\r\nimport {Stage, Layer, Group} from \"react-konva\";\r\n\r\nimport Physics from '../logic/Physics'\r\nimport Sprite from '../logic/Sprite'\r\n\r\nimport Marble from './Marble'\r\n\r\nconst MarbleList = observer(() => {\r\n    const {width, height, marbles} = Physics\r\n    const {marbleTypes} = Sprite\r\n\r\n    return (\r\n        <Stage width={width} height={height}>\r\n            <Layer>\r\n                <Group>\r\n                    {marbles.map(({x, y, id}, i) => (\r\n                        <Marble x={x}\r\n                                y={y}\r\n                                type={marbleTypes[i % marbleTypes.length]}\r\n                                draggable\r\n                                id={id}\r\n                                key={`marble - ${id}`}\r\n                                physics={Physics}\r\n                                sprite={Sprite}\r\n                        />\r\n                    ))}\r\n                </Group>\r\n            </Layer>\r\n        </Stage>\r\n    )\r\n})\r\n\r\nexport default MarbleList\r\n","import React, {useEffect} from 'react';\nimport {observer} from \"mobx-react\";\n\nimport Physics from './logic/Physics'\nimport Sprite from './logic/Sprite'\nimport MarbleList from './components/MarbleList'\n\n\nexport default observer(() => {\n    useEffect(() => {\n        Sprite.loadSprite(() => Physics.startGameLoop())\n    }, [])\n\n    return (\n        <div className='App'>\n            <div className=\"App-header\">\n                <h2>Billiards</h2>\n                <p>Render on canvas, build with React and Konva</p>\n            </div>\n            <div className=\"App-intro\">\n                <MarbleList/>\n            </div>\n        </div>\n    )\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}